<?php

namespace ModulesPressCLI\Services;

use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Question\ConfirmationQuestion;
use Symfony\Component\Filesystem\Exception\IOExceptionInterface;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;
use Symfony\Component\Process\Exception\ProcessFailedException;

class PluginCreationService
{
    private $io;
    private $output;
    private PluginExtractionService $pluginExtractionService;
    private CommonService $commonService;
    private TextReplacerService $textReplacerService;

    private $newPluginName;
    private $newPluginSlug;
    private $newPluginNamespace;
    private $newPluginClassName;
    private $newPluginPrefix;
    private $newPluginDescription;
    private $newPluginAuthor;

    private $isRequiredMozart = false;

    private const STEPS = [
        'INIT' => ['message' => 'Initializing plugin creation', 'weight' => 1],
        'CLONE' => ['message' => 'Cloning starter template', 'weight' => 2],
        'STRUCTURE' => ['message' => 'Setting up plugin structure', 'weight' => 3],
        'COMPOSER' => ['message' => 'Installing Composer dependencies', 'weight' => 2],
        'NPM' => ['message' => 'Installing NPM packages', 'weight' => 2],
        'AUTO_LOADER' => ['message' => 'Configuring auto-loader', 'weight' => 1],
        'FINALIZE' => ['message' => 'Finalizing setup', 'weight' => 1],
    ];

    public function __construct(InputInterface $input, ConsoleOutput $output, SymfonyStyle $io = null)
    {
        $this->output = $output;
        $this->io = $io ?: new SymfonyStyle($input, $output);
        $this->pluginExtractionService = new PluginExtractionService();
        $this->commonService = new CommonService();
    }

    public function createNew()
    {
        try {
            $this->displayHeader();
            $this->collectUserInput();
            $this->initializeServices();
            $this->executeCreationProcess();
            $this->showSuccessMessage();
        } catch (\Exception $e) {
            $this->handleError($e);
        }
    }

    private function displayHeader()
    {
        $this->io->section('Plugin Configuration');
    }

    private function collectUserInput()
    {
        $this->newPluginName = $this->io->ask('📝 Plugin Name');
        $this->newPluginSlug = $this->io->ask('📂 Plugin Slug', $this->commonService->generateSlug($this->newPluginName));
        $this->newPluginNamespace = $this->io->ask('🔷 Main Namespace', $this->commonService->toPascalCase($this->newPluginName));
        $this->newPluginClassName = $this->newPluginNamespace . 'Plugin';
        $this->newPluginPrefix = $this->io->ask('🏷️  Plugin Prefix', $this->commonService->generatePrefix($this->newPluginName));
        $this->newPluginDescription = $this->io->ask('📝 Plugin Description', 'This is a plugin generated by ModulesPress CLI');
        $this->newPluginAuthor = $this->io->ask('👤 Plugin Author', 'Devs Routes Co');
    }

    private function initializeServices()
    {
        $this->textReplacerService = new TextReplacerService(
            newPluginName: $this->newPluginName,
            newPluginSlug: $this->newPluginSlug,
            newPluginNamespace: $this->newPluginNamespace,
            newPluginClassName: $this->newPluginClassName,
            newPluginPrefix: $this->newPluginPrefix,
            newPluginDescription: $this->newPluginDescription,
            newPluginAuthorName: $this->newPluginAuthor
        );
    }

    private function executeCreationProcess()
    {
        $this->io->newLine();
        $this->io->section('🎯 Creating Your Plugin');

        $totalSteps = array_sum(array_column(self::STEPS, 'weight'));
        $progressBar = $this->createProgressBar($totalSteps);

        foreach (self::STEPS as $step => $config) {
            $this->executeStep($step, $progressBar, $config);
        }

        $progressBar->finish();
        $this->io->newLine(2);
    }

    private function createProgressBar($steps)
    {
        $progressBar = new ProgressBar($this->output, $steps);
        $progressBar->setFormat(
            "⏳ %current%/%max% %bar% %percent:3s%%\n" .
                "➤  %message%\n" .
                "⏱  %elapsed:6s%"
        );
        $progressBar->setBarCharacter('▓');
        $progressBar->setEmptyBarCharacter('░');
        $progressBar->setProgressCharacter('▓');
        return $progressBar;
    }

    private function executeStep($step, ProgressBar $progressBar, array $config)
    {
        $progressBar->setMessage($config['message']);

        try {
            switch ($step) {
                case 'INIT':
                    // Initialization tasks
                    break;
                case 'CLONE':
                    $this->cloneRepo();
                    sleep(1);
                    break;
                case 'STRUCTURE':
                    $this->updatePluginMainFile();
                    $this->updateAllPluginFiles($this->newPluginSlug . '/src');
                    break;
                case 'COMPOSER':
                    $this->installComposerDependencies();
                    break;
                case 'NPM':
                    $this->installNpmDependencies();
                    break;
                case 'AUTO_LOADER':
                    $this->configureComposerAndAutoLoader();
                    break;
                case 'FINALIZE':
                    // Cleanup and final tasks
                    break;
            }

            $progressBar->advance($config['weight']);
        } catch (\Exception $e) {
            throw new \Exception("Error in {$step}: " . $e->getMessage());
        }
    }

    protected function cloneRepo()
    {
        $repoUrl = 'https://github.com/devsroutes/modulespress-skeleton';
        $targetDir = $this->newPluginSlug;

        $process = new Process(['git', 'clone', '--depth=1', $repoUrl, $targetDir]);
        $process->setTimeout(300);

        try {
            $process->mustRun();
        } catch (ProcessFailedException $e) {
            throw new \Exception("Git clone failed: " . $e->getMessage());
        }

        try {
            // First try using Process which has better handling for permissions
            $removeGitProcess = new Process(['rm', '-rf', $targetDir . '/.git']);
            $removeGitProcess->run();

            if (!$removeGitProcess->isSuccessful()) {
                // Fallback to Filesystem if Process fails
                $filesystem = new Filesystem();
                $filesystem->chmod($targetDir . '/.git', 0777, 0000, true);
                $filesystem->remove($targetDir . '/.git');
            }
        } catch (\Exception $e) {
            throw new \Exception("Failed to remove .git folder: " . $e->getMessage());
        }

        // Initialize a new Git repository
        $initGitProcess = new Process(['git', 'init'], $targetDir);

        try {
            $initGitProcess->mustRun();
        } catch (ProcessFailedException $e) {
            throw new \Exception("Git initialization failed: " . $e->getMessage());
        }
    }

    protected function updatePluginMainFile()
    {
        $filesystem = new Filesystem();
        $mainPluginPath = $this->pluginExtractionService->findMainPluginFile($this->newPluginSlug);
        $content = file_get_contents($mainPluginPath);
        $content = $this->textReplacerService->replaceNamespaceDeclaration($content);
        $content = $this->textReplacerService->replaceUsedNamespaces($content);
        $content = $this->textReplacerService->replacePluginClassName($content);
        $content = $this->textReplacerService->replacePluginSlug($content);
        $content = $this->textReplacerService->replacePluginName($content);
        $content = $this->textReplacerService->replacePluginPrefix($content);
        $content = $this->textReplacerService->replacePluginDescription($content);
        $content = $this->textReplacerService->replacePluginAuthorName($content);

        try {
            $filesystem->dumpFile($mainPluginPath, $content);
            $filesystem->rename($mainPluginPath, $this->newPluginSlug . '/' . $this->newPluginSlug . '.php');
        } catch (IOExceptionInterface $e) {
            $this->io->error("Error updating file: {$e->getMessage()}");
        }
    }

    protected function updateAllPluginFiles(
        string $directory
    ) {
        $filesystem = new Filesystem();

        // Iterate over all PHP files in the directory
        $finder = new Finder();
        $finder->files()->in($directory)->name('*.php');

        foreach ($finder as $file) {

            $filePath = $file->getRealPath();
            $content = file_get_contents($filePath);

            $content = $this->textReplacerService->replaceNamespaceDeclaration($content);
            $content = $this->textReplacerService->replaceUsedNamespaces($content);
            $content = $this->textReplacerService->replacePluginName($content);
            $content = $this->textReplacerService->replacePluginSlug($content);
            $content = $this->textReplacerService->replacePluginClassName($content);

            try {
                $filesystem->dumpFile($filePath, $content);
            } catch (IOExceptionInterface $e) {
                $this->io->error("Error updating file: {$e->getMessage()}");
            }
        }
    }

    protected function installComposerDependencies()
    {
        $process = new Process(['composer', 'install'], $this->newPluginSlug);
        $process->setTimeout(300);

        try {
            $process->mustRun();
        } catch (ProcessFailedException $e) {
            throw new \Exception("Composer dependencies installation failed: " . $e->getMessage());
        }
    }

    protected function installNpmDependencies()
    {
        $process = new Process(['npm', 'install'], $this->newPluginSlug);
        $process->setTimeout(300);

        try {
            $process->mustRun();
        } catch (ProcessFailedException $e) {
            throw new \Exception("NPM dependencies installation failed: " . $e->getMessage());
        }
    }

    protected function runMozart()
    {
       
        if (!$this->isRequiredMozart) {
            $this->io->info('Mozart not required, skipping prefixes...');
            return;
        }

        $composerJsonPath = $this->newPluginSlug . '/composer.json';
        $composerJson = json_decode(file_get_contents($composerJsonPath), true);

        $composerJson['extra'] = [
            'mozart' => [
                'dep_namespace' => $this->newPluginNamespace . '\\' . 'Vendor\\',
                'dep_directory' => '/src/Vendor/',
                'classmap_directory' => '/src/VendorClassmap/',
                'packages' => [
                    'modulespress/framework'
                ],
                'classmap_prefix' => strtoupper($this->newPluginPrefix) . '_',
                'delete_vendor_directories' => true
            ]
        ];

        file_put_contents(
            $composerJsonPath,
            json_encode($composerJson, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE)
        );

        sleep(1);

        $mozartProcess = new Process(['php', 'vendor/bin/mozart', 'compose'], $this->newPluginSlug);
        $mozartProcess->setTimeout(300);

        try {
            $mozartProcess->mustRun();
        } catch (ProcessFailedException $e) {
            throw new \Exception("Could not prefix ModulePress with Mozart compose being failed: " . $e->getMessage());
        }
    }

    protected function configureComposerAndAutoLoader()
    {
        $composerJsonPath = $this->newPluginSlug . '/composer.json';
        $composerJson = json_decode(file_get_contents($composerJsonPath), true);

        // Basic plugin information
        $composerJson['name'] = strtolower("wp-plugin/{$this->newPluginSlug}");
        $composerJson['description'] = $this->newPluginDescription;
        $composerJson['type'] = 'wordpress-plugin';
        $composerJson['license'] = 'GPL-2.0-or-later';
        $composerJson['authors'] = [
            [
                'name' => $this->newPluginAuthor,
            ]
        ];

        // Autoloading configuration
        $composerJson['autoload']['psr-4'] = [];
        $composerJson['autoload']['psr-4'][$this->newPluginNamespace . '\\'] = 'src/';

        file_put_contents(
            $composerJsonPath,
            json_encode($composerJson, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE)
        );

        $dumpAutoloaderProcess = new Process(['composer', 'dump-autoload'], $this->newPluginSlug);
        $dumpAutoloaderProcess->setTimeout(300);

        try {
            $dumpAutoloaderProcess->mustRun();
        } catch (ProcessFailedException $e) {
            throw new \Exception("Composer dump-autoload failed: " . $e->getMessage());
        }
    }

    private function handleError(\Exception $e)
    {
        $this->io->newLine(2);
        $this->io->error([
            'An error occurred during plugin creation:',
            $e->getMessage()
        ]);

        $this->io->section('🔧 Troubleshooting Tips');
        $this->io->listing([
            'Ensure you have sufficient permissions',
            'Check your internet connection',
            'Verify Git, Composer, and NPM are installed',
            'Clear temporary files and try again'
        ]);

        $this->io->newLine();
        $this->io->writeln('📋 For support:');
        $this->io->listing([
            'Visit our docs: https://modulespress.devsroutes.co/docs',
            'Join Discord: https://discord.gg/jtUn2X3VeH',
            'Report issue: https://github.com/devsroutes/modulespress/issues'
        ]);
    }

    protected function showSuccessMessage()
    {
        $this->io->success([
            '🎉 Plugin created successfully!',
            "Plugin Location: {$this->newPluginSlug}"
        ]);

        $this->io->section('💡 Quick Tips');
        $this->io->listing([
            "✓ Activate the plugin in WordPress admin panel (Plugins > {$this->newPluginName})",
            "✓ Check our online docs for advanced features"
        ]);

        $this->io->section('📋 Next Steps');
        $this->io->listing([
            "cd {$this->newPluginSlug}",
            'npm run dev        # Start vite development server',
            'npm run build      # Build assets for production',
            'modulespress pack  # Package the plugin for distribution'
        ]);

        $this->io->section('🤝 Community & Support');
        $this->io->listing([
            '💬 Discord: https://discord.gg/jtUn2X3VeH',
            '📦 GitHub: https://github.com/devsroutes/modulespress',
            '📚 Docs: https://modulespress.devsroutes.co/docs'
        ]);
    }
}
